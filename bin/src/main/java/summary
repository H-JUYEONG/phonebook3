< update 실행 흐름 >
1. jsp의 form에서 사용자가 입력한 정보를 action="action="/phonebook3/update"로 전송한다.

2. Controller에서 @ModelAttribute PersonVo personVo를 사용하면,
   사용자가 입력한 name, hp, company 정보가 자동으로 PersonVo 객체에 바인딩 된다.
   이때 HTML 폼의 name 속성 값이 PersonVo 클래스의 필드와 일치해야 한다.

3. Controller에서 int count = phonebookDao.updatePerson(personVo);가 실행되면, 
  2번 과정에서 바인딩된 PersonVo 객체를 DAO(Data Access Object) 클래스에 전달한다.
  DAO는 이 객체의 데이터를 사용하여 데이터베이스 작업을 수행한다.

4. DAO에서 데이터베이스 작업이 완료되면 결과를 Controller에 반환한다.
   그러면 Controller에서 return "redirect:/list"; 리다이렉트를 수행한다.
   
-----------------------------------------------------------------------------------
   
< 수정폼과 수정의 전체 흐름 요약 >
1. 수정 폼 요청 (/editform):
사용자가 /editform URL에 접근하면 Controller가 Service를 통해 해당 사람의 데이터를 가져오고, 이 데이터를 JSP에 전달하여 수정 폼을 보여줍니다.

2. 수정 폼 표시 (editForm.jsp):
JSP는 전달받은 데이터를 이용해 수정 폼을 미리 채우고, 사용자가 수정한 데이터를 /update URL로 전송합니다.

3. 수정 요청 처리 (/update):
Controller는 JSP에서 전송된 데이터를 받아 Service를 통해 데이터베이스에 수정 내용을 반영한 후, 리스트 페이지로 리다이렉트합니다.

-----------------------------------------------------------------------------------
수정폼에서 @RequestParam(value = "no") int no 값을 알 수 있는 이유는
list.jsp에서 <a href="/phonebook3/editform?no=${personVo.personId}">[수정폼으로 이동]</a> 코드에 no 값을 넘겨주기때문에 